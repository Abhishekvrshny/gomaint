services:
  # Apache Kafka - simplified setup
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka-broker
    user: root  # Run as root to avoid permission issues
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://:29092,CONTROLLER://:29093,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      # JVM heap settings for development
      KAFKA_HEAP_OPTS: '-Xmx512M -Xms256M'
    ports:
      - "9092:9092"      # External access
      - "29092:29092"    # Internal access
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - kafka-network
    command: >
      bash -c "
        # Format storage directory if it doesn't exist
        if [ ! -f /var/lib/kafka/data/meta.properties ]; then
          kafka-storage format -t MkU3OEVBNTcwNTJENDM2Qk -c /etc/kafka/kafka.properties
        fi
        # Start Kafka
        /etc/confluent/docker/run
      "
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Kafka UI for topic and partition management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: 'local-kafka'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka:29092'
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      DYNAMIC_CONFIG_ENABLED: 'true'
      SERVER_PORT: 8080
    ports:
      - "8086:8080"     # Kafka UI web interface
    networks:
      - kafka-network
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  # etcd for maintenance mode coordination
  etcd:
    image: quay.io/coreos/etcd:v3.5.9
    container_name: kafka-etcd
    environment:
      - ETCD_NAME=etcd0
      - ETCD_DATA_DIR=/etcd-data
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd:2380
      - ETCD_INITIAL_CLUSTER=etcd0=http://etcd:2380
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster-1
      - ETCD_INITIAL_CLUSTER_STATE=new
      - ETCD_AUTO_COMPACTION_RETENTION=1
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_HEARTBEAT_INTERVAL=250
      - ETCD_ELECTION_TIMEOUT=1250
    ports:
      - "2401:2379"     # etcd client port (different from SQS service)
      - "2402:2380"     # etcd peer port
    volumes:
      - kafka_etcd_data:/etcd-data
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Confluent Kafka Service Application
  confluent-kafka-service:
    build:
      context: ../../
      dockerfile: examples/kafka-confluent-service/Dockerfile
    container_name: confluent-kafka-service-app
    environment:
      KAFKA_BROKERS: "kafka:29092"
      KAFKA_TOPICS: "test-topic,user-events,system-logs"
      KAFKA_CONSUMER_GROUP: "confluent-gomaint-consumer-group"
      ETCD_ENDPOINTS: "etcd:2379"
    ports:
      - "8085:8085"     # HTTP API port (different from other services)
    networks:
      - kafka-network
    depends_on:
      kafka:
        condition: service_healthy
      etcd:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s

  # Debug container for Kafka management and testing
  kafka-debug:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka-debug-tools
    networks:
      - kafka-network
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: >
      sh -c "
        echo 'Kafka debug container ready';
        echo 'Available Kafka tools:';
        echo '  kafka-topics --bootstrap-server kafka:29092 --list';
        echo '  kafka-console-producer --bootstrap-server kafka:29092 --topic test-topic';
        echo '  kafka-console-consumer --bootstrap-server kafka:29092 --topic test-topic --from-beginning';
        echo '  kafka-consumer-groups --bootstrap-server kafka:29092 --list';
        echo 'Kafka UI available at: http://localhost:8085';
        echo 'Service API available at: http://localhost:8085';
        tail -f /dev/null
      "

volumes:
  kafka_etcd_data:
    driver: local
  kafka_data:
    driver: local

networks:
  kafka-network:
    driver: bridge